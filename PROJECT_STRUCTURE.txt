FREESTYLE RAP TRAINING APPLICATION
============================

Project Overview:
----------------
A React-based application for practicing freestyle rap in Finnish and English. The app provides various training modes, vocabulary sets, beat synchronization features, and vocal recording capabilities to help users improve their rap and rhyming skills.

Directory Structure:
------------------

/src
  - App.css                  : Global application styles
  - App.jsx                  : Main application component and routing
  - main.jsx                 : Application entry point
  - styles.css               : Additional global styles
  - index.css                : Root styles
  /components
    - TrainingModeRenderer.jsx : Component for rendering different training modes
    - RecordButton.jsx        : Recording button component
    - RecordButton.css        : Styles for recording button
    - BeatSelectModal.jsx     : Modal for beat selection
    /modes
      - BaseTrainingMode.jsx   : Base component for all training modes
      - BaseTrainingMode.css   : Common styles for all training modes, including shared styles for bars and rhyme patterns
      - SetupPunchlineMode.jsx : Setup & Punchline training mode component
      - SetupPunchlineMode.css : Styles for Setup & Punchline mode
      - RhymeMapMode.jsx       : Rhyme map training mode component
      - RhymeMapMode.css       : Styles for rhyme map mode
      - RhymeExplorerMode.jsx  : Rhyme explorer mode component
      - RhymeExplorerMode.css  : Styles for rhyme explorer mode
      - FindRhymesMode.jsx     : Find rhymes mode component
      - FindRhymesMode.css     : Styles for find rhymes mode
      - SlotMachineMode.jsx    : Slot machine mode component
      - SlotMachineMode.css    : Styles for slot machine mode
    
    - ModeSelector.jsx         : Component for selecting different training modes
    - BeatSelector.jsx         : Full-featured beat selection and control
    - CompactBeatSelector.jsx  : Minimalistic version of beat controls with mute option
    - BpmSelector.jsx          : Component for BPM selection
    - VocabularySelector.jsx   : Component for choosing word sets
    - VocabularySelectModal.jsx: Modal for selecting vocabulary sets
    - LanguageToggle.jsx       : Language switching between FI/EN
    - RecordToggle.jsx         : Toggle for enabling/disabling recording
    - RecordingsModal.jsx      : Modal for managing and playing recordings

  /styles
    - VocabularySelector.css  : Styles for vocabulary selection
    - VocabularySelectModal.css: Styles for vocabulary selection modal
    - BeatSelector.css        : Styles for beat selection
    - BeatSelectModal.css     : Styles for beat selection modal
    - BpmSelector.css         : Styles for BPM selector
    - ModeSelector.css        : Styles for mode selection
    - CompactBeatSelector.css : Styles for compact beat selector with mute
    - RecordToggle.css        : Styles for recording toggle button
    - RecordingsModal.css     : Styles for recordings modal
    - LanguageToggle.css      : Styles for language toggle

  /services
    - WordListService.js      : Service for word list generation and rhyme management
    - RhythmService.js        : Service for rhythm and timing management
    - AudioService.js         : Core Web Audio API service for audio playback and routing
                               Handles audio context, gain nodes, and beat buffer management
                               Uses singleton pattern for consistent audio context

    - RecordingService.js     : Handles microphone recording functionality
                               Manages MediaRecorder API and recording streams
                               Integrates with AudioService for context sharing
                               Processes recordings into playable format

    - TranslationContext.jsx  : Handles multilingual support
    - DebugContext.jsx        : Debugging utilities and feature flags

  /hooks
    - useAudioController.js   : Hook for high-level audio control and musical timing
                               Manages sixteenth notes and quarter notes progression
                               Handles BPM changes and beat selection
                               Provides precise timing using setTimeout
    - useRecordingController.js : Hook for managing recording state and controls

  /data
    /vocabulary/
      - vocabularyConfig.js    : Configuration for different vocabulary sets
      - FI_generic_rap.js      : Finnish rap-oriented vocabulary
      - EN_generic_rap.js      : English rap-oriented vocabulary
      - FI_elaimet.js          : Finnish animal-themed vocabulary
      - FI_tiede.js            : Finnish science-themed vocabulary
      - FI_ostoslista.js       : Finnish shopping list vocabulary
      - FI_autot.js            : Finnish car-themed vocabulary
      - FI_numerot.js          : Finnish numbers vocabulary
      - FI__full_dict.js       : Complete Finnish dictionary
      - EN__full_dict.js       : Complete English dictionary
    
    /vocabulary_audio_metadata/  : Generated metadata for word audio files
      - FI_generic_rap_audio_metadata.js  : Audio URLs for Finnish rap vocabulary
      - EN_generic_rap_audio_metadata.js  : Audio URLs for English rap vocabulary
      - FI_elaimet_audio_metadata.js      : Audio URLs for Finnish animal vocabulary
      // ... other vocabulary audio metadata files
    
    /beat_metadata/
      - index.js              : Beat metadata exports and configuration
      - going_strong.js       : Going Strong beat metadata and variations
      - night_ride.js         : Night Ride beat metadata and variations
    
    - trainingModes.js        : Training mode configurations
    - wordList.js             : Word list generation and processing

/scripts
  /audio_processing/
    /beats/
      /__raw_beat_files/     : Original unprocessed beat files
      /__processed_beats/    : Processed beat files with BPM variations
    - process_beats.py       : Script for generating BPM variations
    - upload_beats.py        : Script for uploading beats to Cloudinary
    - requirements.txt       : Python dependencies for audio processing

  /data_processing/
    - rhyme_generator-FI.py   : Finnish rhyme generation script
    - combine_vocabulary.py   : Script for combining vocabulary sets
    - process_rhymes-FI.bat   : Batch processing for Finnish rhymes

  /words_tts/             : Word audio generation and management
    /__generated_audio/   : Generated MP3 files for words
      /FI_elaimet/       : Audio files for Finnish animal vocabulary
      /EN_animals/       : Audio files for English animal vocabulary
      // ... other vocabulary-specific folders
    
    /__audio_status/     : Status tracking for audio generation and uploads
      - FI_elaimet.json  : Status for Finnish animal vocabulary
      - EN_animals.json  : Status for English animal vocabulary
      // ... other vocabulary status files
    
    - generate_word_audio_speechgen.py  : Script for generating word audio using SpeechGen API
    - upload_word_audio.py              : Script for uploading word audio to Cloudinary
    - generate_metadata.py              : Script for generating app metadata from status files

Key Features:
------------
1. Multiple Training Modes:
   - Setup & Punchline practice with
   - Rhyme Explorer for vocabulary building
   - Interactive Find Rhymes game
   - Visual Rhyme Map for pattern exploration
   - Slot Machine mode with adjustable bar length and continuous word flow

2. Vocabulary Management:
   - Multiple predefined word sets
   - Support for both Finnish and English
   - Themed collections (animals, science, cars, etc.)
   - Full dictionary support
   - Improved rhyme group organization

3. Beat System:
   - Web Audio API based playback
   - Customizable BPM with multiple variations
   - Multiple beat patterns
   - Synchronized word changes
   - Beat preview and selection
   - Volume control with mute option
   - Cloudinary-hosted beat files

4. Recording System:
   - Microphone input recording
   - Beat and vocals synchronization
   - Recording playback with original beat
   - Recording management and storage
   - Debug mode access control

5. Bilingual Support:
   - Full Finnish and English translations
   - Language-specific rhyme generation
   - Separate vocabulary sets for each language

6. Audio Processing:
   - Automated BPM variation generation
   - Two-step process: process then upload
   - FFmpeg-based audio processing
   - Cloudinary integration for hosting 

7. Word Audio System:
   - Text-to-speech generation for vocabulary words
   - Language-specific voice selection (Harri for Finnish, Hunter for English)
   - Three-step process:
     1. Generate audio files using SpeechGen API
     2. Upload files to Cloudinary
     3. Generate app metadata
   - Status tracking for generation and uploads
   - Vocabulary-specific organization
   - Command-line and interactive interfaces
   - SSML support for better audio quality
   - Automatic phonetic version handling

8. Development Features:
   - Debug mode for testing and development
   - Centralized rhythm management through RhythmService
   - Shared styling through BaseTrainingMode.css
   - Improved code organization and reusability 